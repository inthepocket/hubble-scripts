const { outputHelper } = require('./util');
const { mapBaseColors, mapBorderStyleColors, mapShadowStyleColors } = require('./colorMapping');
const { mapTextStyleAssets } = require('./assetMapping');
const { mapTextStyleSizes, mapBorderStyleSizes } = require('./sizeMapping');
const { mapTextStyleFonts } = require('./fontMapping');
const { mapFontWeights, mapTextStyleWeights } = require('./weightMapping');
const { mapTextStyleLineHeights } = require('./lineHeightMapping');
const { mapBlurStyles } = require('./blurMapping');
const { fontWeights } = require('../font');

/**
 * Maps the colors of a given input of ITP tokens to Style Dictionary compatible color tokens.
 *
 * @param Object input: ITP tokens
 * @returns Object: a StyleDictionary tree of category 'color'
 */
const mapColors = input =>
  outputHelper('color', {
    ...mapBaseColors(input.colors),
    ...mapBorderStyleColors(input.borders),
    ...mapShadowStyleColors(input.shadows),
  });

/**
 * Maps the sizes of a given input of ITP tokens to Style Dictionary compatible size tokens.
 *
 * @param Object input: ITP tokens
 * @returns Object: a StyleDictionary tree of category 'size'
 */
const mapSizes = input =>
  outputHelper('size', {
    ...mapTextStyleSizes(input.textStyles),
    ...mapBorderStyleSizes(input.borders),
  });

/**
 * Maps the line heights of a given input of generic tokens to Style Dictionary compatible lineHeight tokens.
 *
 * @param Object input: generic tokens
 * @returns Object: a StyleDictionary tree of category 'lineHeight'
 */
const mapLineHeights = input =>
  outputHelper('lineHeight', mapTextStyleLineHeights(input.textStyles));

/**
 * Maps the assets of a given input of ITP tokens to Style Dictionary compatible asset tokens.
 *
 * @param Object input: ITP tokens
 * @returns Object: a StyleDictionary tree of category 'asset'
 */
const mapAssets = input => outputHelper('asset', mapTextStyleAssets(input.textStyles));

const mapFonts = input => outputHelper('font', mapTextStyleFonts(input.textStyles));

const mapWeights = input =>
  outputHelper('weight', {
    ...mapFontWeights(input.textStyles),
    ...mapTextStyleWeights(input.textStyles),
  });

const mapGrid = input => {
  if (!input.grid || typeof input.grid !== 'object') {
    return {}
  }

  return outputHelper('grid', {
    global: {
      value: input.grid.size,
      comment: 'Global grid size definition'
    }
  })
}

/**
 * Main entry function.
 *
 * @param input: ITP Token input, generated by hubble from a sketch source
 * @returns Object: a Style Dictionary compatible token tree
 */
module.exports = input => ({
  ...mapColors(input),
  ...mapFonts(input),
  ...mapLineHeights(input),
  ...mapSizes(input),
  ...mapWeights(input, fontWeights),
  ...mapBlurStyles(input.blurs),
  ...mapAssets(input),
  ...mapGrid(input),
});
