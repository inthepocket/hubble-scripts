const { outputHelper } = require('./util');
const { mapBaseColors, mapTextStyleColors, mapBorderStyleColors, mapShadowStyleColors } = require('./colorMapping');
const { mapTextStyleAssets } = require('./assetMapping');
const { mapTextStyleSizes, mapBorderStyleSizes } = require('./sizeMapping');

/**
 * Maps the colors of a given input of ITP tokens to Style Dictionary compatible color tokens.
 *
 * @param Object input: ITP tokens 
 * @returns Object: a StyleDictionary tree of category 'color' 
 */
const mapColors = input => {
  const colorsOutput = mapBaseColors(input.colors);
  const fontColorsOutput = mapTextStyleColors(input.textStyles);
  const borderColorsOutput = mapBorderStyleColors(input.borders);
  const shadowColorsOutput = mapShadowStyleColors(input.shadows);

  const output = Object.assign(
    {},
    colorsOutput,
    fontColorsOutput,
    borderColorsOutput,
    shadowColorsOutput,
  );

  return outputHelper('color', output);
};

/**
 * Maps the sizes of a given input of ITP tokens to Style Dictionary compatible size tokens.
 *
 * @param Object input: ITP tokens 
 * @returns Object: a StyleDictionary tree of category 'size' 
 */
const mapSizes = input => {
  const textOutput = mapTextStyleSizes(input.textStyles);
  const borderOutput = mapBorderStyleSizes(input.borders);

  return outputHelper('size', Object.assign({}, textOutput, borderOutput));
};

/**
 * Maps the assets of a given input of ITP tokens to Style Dictionary compatible asset tokens.
 *
 * @param Object input: ITP tokens 
 * @returns Object: a StyleDictionary tree of category 'asset' 
 */
const mapAssets = input => {
  const textOutput = mapTextStyleAssets(input.textStyles);

  return outputHelper('asset', textOutput);
}

/**
 * Main entry function.
 * 
 * @param input: ITP Token input, generated by hubble from a sketch source
 * @returns Object: a Style Dictionary compatible token tree
 */
module.exports = (input) => Object.assign(
  {},
  mapColors(input),
  mapSizes(input),
  mapAssets(input)
);
